#!/usr/bin/env node

// Taken from https://github.com/vatesfr/xen-orchestra/blob/master/scripts/lint-staged

const { execFileSync, spawnSync } = require('child_process')
const { readFileSync, writeFileSync } = require('fs')
const { insight } = require('./helpers/insights')
const debug = require('debug')('script:precommit')
const path = require('path')

insight.track('precommit', 'start')
const prettierIgnorePath = path.resolve(__dirname, '../.prettierignore')
const tslintConfig = path.resolve(__dirname, '../tslint.json')

const nodeModulesBin = cmd =>
  path.resolve(__dirname, '../node_modules/.bin', cmd)

const gitDiff = (what, args = []) =>
  execFileSync(
    'git',
    [
      `diff-${what}`,
      '--diff-filter=AM',
      '--ignore-submodules',
      '--name-only',
    ].concat(args),
    {
      encoding: 'utf8',
    },
  )
    .split('\n')
    .filter(_ => _ !== '')
const gitDiffFiles = (files = []) => gitDiff('files', files)
const gitDiffIndex = () => gitDiff('index', ['--cached', 'HEAD'])

const run = (command, args) => {
  const { status } = spawnSync(command, args, { stdio: 'inherit' })
  if (status !== 0) {
    insight.track('precommit', 'failure')
    process.exit(status)
  }
}

const formatFiles = files => {
  const prettierFiles = files.filter(file => /(.jsx?$)|(.tsx?$)/.test(file))
  const packageJsonFiles = files.filter(file => file.includes('package.json'))
  const eslintFiles = files.filter(file => /.js$/.test(file))
  const tslintFiles = files.filter(file => /.tsx?$/.test(file))

  if (prettierFiles.length) {
    run(
      nodeModulesBin('prettier'),
      ['--ignore-path', prettierIgnorePath, '--write'].concat(prettierFiles),
    )
  }

  if (packageJsonFiles.length) {
    run(
      nodeModulesBin('prettier-package-json'),
      ['--write'].concat(packageJsonFiles),
    )
  }
  if (eslintFiles.length) {
    run(
      nodeModulesBin('eslint'),
      ['--ignore-pattern', '!*', '--fix'].concat(eslintFiles),
    )
  }

  if (tslintFiles.length) {
    run(
      nodeModulesBin('tslint'),
      ['--config', tslintConfig, '--exclude', '!*', '--fix'].concat(
        files.filter(file => /.tsx?$/.test(file)),
      ),
    )
  }
}
const testFiles = files => {
  const jestTestFiles = files.filter(file => /(.jsx?|.tsx?)$/.test(file))
  if (jestTestFiles.length) {
    run(
      nodeModulesBin('jest'),
      [
        '--testRegex=^(?!.*.e2e.test.(js|tsx?)$).*.test.(js|tsx?)$',
        '--findRelatedTests',
        '--passWithNoTests',
      ].concat(jestTestFiles),
    )
  }
}

const files = gitDiffIndex()
if (files.length === 0) {
  process.exit(0)
}

// save the list of files with unstaged changes
let unstaged = gitDiffFiles(files)

// format all files
formatFiles(files)

if (unstaged.length !== 0) {
  // refresh the list of files with unstaged changes, maybe the
  // changes have been reverted by the formatting
  run('git', ['update-index', '-q', '--refresh'])
  unstaged = gitDiffFiles(unstaged)

  if (unstaged.length !== 0) {
    const contents = unstaged.map(name => readFileSync(name))
    process.on('exit', () =>
      unstaged.map((name, i) => writeFileSync(name, contents[i])),
    )
    run('git', ['checkout'].concat(unstaged))
    formatFiles(unstaged)
  }
}

testFiles(files)

run('git', ['add'].concat(files))

insight.track('precommit', 'success')

debug('process.env', process.env)
debug('git params', process.env.GIT_PARAMS)
