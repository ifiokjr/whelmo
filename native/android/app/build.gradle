apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: '../../node_modules/react-native/react.gradle'` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: 'index.android.bundle',
 *
 *   // the entry file for bundle generation
 *   entryFile: 'index.android.js',
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where 'package.json' lives
 *   root: '../../',
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: '$buildDir/intermediates/assets/debug',
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: '$buildDir/intermediates/assets/release',
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: '$buildDir/intermediates/res/merged/debug',
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: '$buildDir/intermediates/res/merged/release',
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ['android/**', 'ios/**'],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ['node'],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: 'index.js',
    bundleInStaging: true,
    devDisabledInStaging: true
]

apply from: '../../node_modules/react-native/react.gradle'
apply from: '../../node_modules/react-native-code-push/android/codepush.gradle'

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    dexOptions {
        jumboMode true
    }
    
    lintOptions {
        // checkReleaseBuilds false
        // // Or, if you prefer, you can continue to check for errors in release builds,
        // // but continue the build even when errors are found:
        abortOnError false
    }
    compileSdkVersion 27
    defaultConfig {
        applicationId 'com.whelmo'
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName '1.0.0'
        ndk {
            abiFilters 'armeabi-v7a', 'x86'
        }
        resValue 'string', 'build_config_package', 'com.whelmo'
        multiDexEnabled true
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
    }
    signingConfigs {
        release {
            if (project.hasProperty('WHELMO_RELEASE_STORE_FILE')) {
                storeFile file(WHELMO_RELEASE_STORE_FILE)
                storePassword WHELMO_RELEASE_STORE_PASSWORD
                keyAlias WHELMO_RELEASE_KEY_ALIAS
                keyPassword WHELMO_RELEASE_KEY_PASSWORD
            }
        }
        staging {
            if (project.hasProperty('WHELMO_STAGING_STORE_FILE')) {
                storeFile file(WHELMO_STAGING_STORE_FILE)
                storePassword WHELMO_STAGING_STORE_PASSWORD
                keyAlias WHELMO_STAGING_KEY_ALIAS
                keyPassword WHELMO_STAGING_KEY_PASSWORD
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include 'armeabi-v7a', 'x86'
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix '.dev'
            manifestPlaceholders = [excludeSystemAlertWindowPermission: 'false']
        }
        staging {
            applicationIdSuffix '.staging'
            signingConfig signingConfigs.staging
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [excludeSystemAlertWindowPermission: 'true']
            matchingFallbacks = ['debug', 'release']
        }
        release {
            applicationIdSuffix '.app'
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [excludeSystemAlertWindowPermission: 'true']
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ['armeabi-v7a': 1, 'x86': 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    buildToolsVersion '27.0.3'
}

dependencies {
    compile project(':react-native-fetch-blob')
    compile project(':react-native-blur')
    compile project(':react-native-linear-gradient')
    implementation(project(':react-native-camera')) {
        exclude group: 'com.google.android.gms';
        exclude group: 'com.android.support';
    }
    implementation project(':react-native-webview-bridge-updated')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-svg')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-share')
    implementation project(':react-native-keychain')
    implementation project(':react-native-i18n')
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-code-push')
    implementation project(':appcenter-crashes')
    implementation project(':appcenter-analytics')
    implementation project(':appcenter')
    implementation project(':react-native-config')
    implementation(project(':react-native-firebase')) {
        transitive = false;
        // exclude group: 'com.google.android.gms';
        // exclude group: 'com.google.firebase';
    }
    implementation 'com.google.firebase:firebase-core:15.0.2'
    implementation "com.google.android.gms:play-services-base:$googlePlayServicesVersion"
    // RNFirebase optional dependencies
    implementation 'com.google.firebase:firebase-auth:15.1.0'
    implementation "com.google.firebase:firebase-config:$googlePlayServicesVersion"
    implementation "com.google.firebase:firebase-database:$googlePlayServicesVersion"
    implementation 'com.google.firebase:firebase-invites:15.0.1'
    implementation 'com.google.firebase:firebase-firestore:16.0.0'
    implementation 'com.google.firebase:firebase-messaging:15.0.2'
    implementation 'com.google.firebase:firebase-perf:15.1.0'
    implementation 'com.google.firebase:firebase-storage:15.0.2'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true;
    }
    implementation 'com.android.support:multidex:1.0.1'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation 'com.facebook.react:react-native:+'
    // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

project.afterEvaluate {
    apply from: '../../node_modules/react-native-zss-rich-text-editor/htmlCopy.gradle';
    copyEditorHtmlToAppAssets(file('../../node_modules/react-native-zss-rich-text-editor'))
}


apply plugin: 'com.google.gms.google-services'